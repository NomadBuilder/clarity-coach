#!/usr/bin/env python3
"""
PDF Generator for Clarity Coach
Converts Markdown meeting summaries to beautiful PDFs with styling and emoji support.
"""

import os
import sys
import subprocess
import markdown
from pathlib import Path
from weasyprint import HTML, CSS
from weasyprint.text.fonts import FontConfiguration

def add_title_to_markdown(markdown_content, meeting_name, timestamp):
    """Add a title page to the markdown content."""
    title = f"""# üéØ Clarity Coach Meeting Analysis

**Meeting:** {meeting_name}  
**Date:** {timestamp}  
**Generated by:** Clarity Coach AI

---

"""
    return title + markdown_content

def convert_markdown_to_pdf(input_file, output_file, meeting_name, timestamp):
    """Convert markdown to PDF using WeasyPrint with custom styling."""
    
    # Read the markdown content
    with open(input_file, 'r', encoding='utf-8') as f:
        markdown_content = f.read()
    
    # Add title page
    enhanced_content = add_title_to_markdown(markdown_content, meeting_name, timestamp)
    
    # Convert markdown to HTML
    html_content = markdown.markdown(enhanced_content, extensions=['toc', 'tables', 'fenced_code'])
    
    # Create full HTML document
    html_doc = f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Clarity Coach - {meeting_name}</title>
    <style>
        {get_css_styles()}
    </style>
</head>
<body>
    {html_content}
</body>
</html>"""
    
    try:
        print(f"üîÑ Converting to PDF: {output_file}")
        
        # Configure fonts
        font_config = FontConfiguration()
        
        # Create PDF
        HTML(string=html_doc).write_pdf(
            output_file,
            font_config=font_config
        )
        
        print(f"‚úÖ PDF generated successfully: {output_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error during PDF generation: {e}")
        return False

def get_css_styles():
    """Get CSS styles for the PDF."""
    css_file = Path(__file__).parent / "pdf_template.css"
    if css_file.exists():
        with open(css_file, 'r', encoding='utf-8') as f:
            return f.read()
    else:
        # Fallback CSS if file doesn't exist
        return """
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #2d3748;
            max-width: 800px;
            margin: 0 auto;
            padding: 40px;
        }
        h1 { color: #2b6cb0; font-size: 2.5em; text-align: center; }
        h2 { color: #2d3748; font-size: 1.8em; margin-top: 2em; }
        h3 { color: #4a5568; font-size: 1.4em; margin-top: 1.5em; }
        """

def main():
    if len(sys.argv) != 3:
        print("Usage: python3 generate_pdf.py <input_markdown_file> <output_pdf_file>")
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_file = sys.argv[2]
    
    if not os.path.exists(input_file):
        print(f"‚ùå Input file not found: {input_file}")
        sys.exit(1)
    
    # Extract meeting name and timestamp from file path
    input_path = Path(input_file)
    output_dir = input_path.parent
    meeting_name = "Meeting Analysis"
    timestamp = "Generated"
    
    # Try to extract meeting name from directory name
    if "output_" in output_dir.name:
        meeting_name = output_dir.name.replace("output_", "").replace("_", " ")
    
    # Try to extract timestamp from directory name (output_YYYY-MM-DD_HH-MM_MeetingName)
    if "output_" in output_dir.name:
        dir_parts = output_dir.name.replace("output_", "").split("_")
        if len(dir_parts) >= 2:
            date_part = dir_parts[0]  # YYYY-MM-DD
            time_part = dir_parts[1]  # HH-MM
            timestamp = f"{date_part} {time_part.replace('-', ':')}"
    
    success = convert_markdown_to_pdf(input_file, output_file, meeting_name, timestamp)
    
    if success:
        print(f"üéâ PDF ready: {output_file}")
        # Open the PDF
        subprocess.run(['open', output_file])
    else:
        print("‚ùå PDF generation failed")
        sys.exit(1)

if __name__ == "__main__":
    main() 